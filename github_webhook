#!/usr/bin/env python
from __future__ import print_function
from hashlib import sha1
from _py2with3compatibility import Request, urlopen, urlencode, unquote
import os, sys, json, hmac, re

print("Content-Type: text/html\n")
BASE_DIRECTORY = "../data"

def check_event(data):
  if not 'HTTP_X_GITHUB_EVENT' in os.environ: return False,''
  event = os.environ['HTTP_X_GITHUB_EVENT']
  if not event in ['issues', 'issue_comment', 'pull_request' , 'push', 'ping']: return False,event
  if (event == 'ping'):
    organization = data['organizaton']['login']
    if repo in ['github-bot']:
      return True, event
    return True, event
  elif (event == 'push'):
    branch = data["ref"]
    if not branch.startswith("refs/heads/"):
      return False, event
    if (not data['repository']['full_name'] in ['larsoft/github-bot', 'larsoft/cmsdist', 'larsoft/cmssw']):
      return False,event
    repo = data['repository']['name']
    if repo in ['github-bot']:
      return True, event
    branch = branch.replace("refs/heads/","")
    sys.path.append(BASE_DIRECTORY+"/github-bot")
    from forward_ports_map import GIT_REPO_FWPORTS
    if (not repo in GIT_REPO_FWPORTS) or (not branch in GIT_REPO_FWPORTS[repo]):
      return False, event
  elif (event == 'pull_request'):
    if (not data['action'] in ['opened','synchronize']): return False,event
    if (data['repository']['full_name'] in ['larsoft/cmsdist']) and (not data["pull_request"]["base"]["ref"].startswith("IB/CMSSW_")):
      return False,event
  elif (event == 'issues') and (not data['action'] in ['opened']): return False,event
  elif (event == 'issue_comment'):
    if (not data['action'] in ['created']): return False,event
    sys.path.append(BASE_DIRECTORY+"/github-bot")
    from categories import USERS_TO_TRIGGER_HOOKS as l2
    from releases import USERS_TO_TRIGGER_HOOKS as managers
    valid_admins = l2 | managers
    if not data['comment']['user']['login'] in valid_admins: return False,event
  return True, event

#check signature function
def check_signature(data):
  if not 'HTTP_X_HUB_SIGNATURE' in os.environ: return False
  sha_name, signature = os.environ['HTTP_X_HUB_SIGNATURE'].split('=')
  if sha_name != 'sha1': return False
  try:
    secret = open(BASE_DIRECTORY+'/github_hook_secret','r').read().split('\n')[0].strip()
  except Exception as e:
    print("Unable to read secret file")
    return False
  mac = hmac.new(str(secret), msg=data, digestmod=sha1)
  print(str(mac.hexdigest()) , str(signature))
  return str(mac.hexdigest()) == str(signature)

#check source ip in white list fucntion
def check_ip():
  try:
    ip_net = open(BASE_DIRECTORY+'/github-hook-meta.txt','r').read().split('\n')[0].strip()
  except Exception as e:
    print("Unable to read github hoot meta information, using hard coded value")
    ip_net ="192.30.252.0/22"

  ip, mask = ip_net.split('/')
  mask = int(mask)
  ip = ''.join(["{0:08b}".format(int(i)) for i in ip.split('.') ])[0:mask]
  if 'HTTP_X_FORWARDED_FOR' in os.environ and os.environ['HTTP_X_FORWARDED_FOR']!='':
    src_ip = ''.join([ "{0:08b}".format(int(i)) for i in os.environ['HTTP_X_FORWARDED_FOR'].split('.')])[0:mask]
  else:
    src_ip = ''.join([ "{0:08b}".format(int(i)) for i in os.environ['REMOTE_ADDR'].split('.')])[0:mask]
  return ip == src_ip

#test jenkins parameters
def get_parameters(info, event):
  params = []
  job = ""
  repo = info["repository"]["full_name"]

  if event in ['ping']:
    job = "github-push-hook"
    params.append({"name":"REPOSITORY","value":""})
    params.append({"name":"BRANCH","value" : ""})
    params.append({"name":"COMMITS","value" : ","})
    return json.dumps({"parameter":params}) , job

  if event in ['push']:
    job = "github-push-hook"
    params.append({"name":"REPOSITORY","value":repo})
    params.append({"name":"BRANCH","value" : info["ref"].replace("refs/heads/","")})
    params.append({"name":"COMMITS","value" : ",".join([c['id'] for c in info['commits']])})
    return json.dumps({"parameter":params}) , job

  etype = ""
  if event in ['issues', 'issue_comment']:
    etype = "issue"
  elif event in ['pull_request']:
    etype = "pull_request"
  else:
    return '',''
  title = info[etype]["title"]
  pr_num = info[etype]["number"]
  if (repo == "larsoft/cmssw") and (re.match('^[Bb]uild[ ]+(CMSSW_[^ ]+)', title)):
    job = "query-build-release-issues"
    params.append({"name":"TIME_INTERVAL","value":"60"})
    params.append({"name":"FORCE_ISSUE","value":pr_num})
    params.append({"name":"IGNORE_ISSUE","value":"6375"})
    params.append({"name":"DRY_RUN","value":"false"})
  else:
    job = "github-bot"
    params.append({"name":"TIME_INTERVAL","value":"60"})
    params.append({"name":"FORCE_PULL_REQUEST","value":pr_num})
    params.append({"name":"REPOSITORY","value":repo})
    if (repo=="larsoft/cmssw") or (repo=="larsoft/cmsdist"):
      params.append({"name":"ISSUES","value":"true"})
    else:
      job = "github-bot-externals"
  return json.dumps({"parameter":params}), job

#get data
data = sys.stdin.read()
try:
  payload = json.loads(data)
except Exception as e:
  print("Invalid data, can not read json input")
  sys.exit()
#check valid data, ip and signature of source
valid, event = check_event(payload)
if not valid:
  print('Failed event validation\n')
  sys.exit()
if not check_ip():
  print('Failed source ip validation\n')
  sys.exit()
if not check_signature(data):
  print('Failed signature validation\n')
  sys.exit()
#trigger jenkins job
jenkins_parameters, job = get_parameters(payload, event)
crumbreq=Request(url='https://buildmaster.fnal.gov/buildmaster/crumbIssuer/api/json')
crumbread = urlopen(crumbreq).read()
crumbdict=json.loads(crumbread)
crumb=str(crumbdict['crumb'])
if job:
  url = 'https://buildmaster.fnal.gov/buildmaster/job/%s' % job
  data = {
              "json": jenkins_parameters,
              "Submit": "Build"
         }
  
  try:
    req = Request(url=url, data=data, headers={ 'crumb' : crumb })
    content = urlopen(req).read()
  except Exception as e:
    print("Unable to start jenkins job\n error: %s " % e)
