#!/usr/bin/env python3
from __future__ import print_function
from os.path import dirname, abspath, join, exists
from argparse import ArgumentParser
from datetime import datetime, timedelta
from socket import setdefaulttimeout
from typing import List

from github_utils import get_repository_issues, get_organization_repositores
from github_hooks_config import get_repository_hooks
import sys
setdefaulttimeout(None)
SCRIPT_DIR = dirname(abspath(sys.argv[0]))

def check_prs(repo, since, process_issue, dryRun):
  #if repo.full_name in ["cms-sw/cmsdist", "cms-sw/cmssw"]: return
  if not get_repository_hooks(repo,"Jenkins_Github_Hook"): return  
  print("Working on Repository: ",repo)
  if since:
    issues: List[dict] = get_repository_issues(repo, params={"state": "open", "sort": "updated", "since": since})
  else:
    issues: List[dict] = get_repository_issues(repo, params={"state": "open", "sort": "updated"})
  err=0
  for issue in issues:
    if not process_issue and not issue["pull_request"]:
      print("Only processing PRs, skipped issue: ",issue["number"])
      continue
    try:
      process_pr(repo_config, None, repo, issue, dryRun)
    except Exception as e :
      print("ERROR: Failed to process",repo,issue["number"])
      print(e)
      err=1
  return err 

if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("-n", "--dry-run", dest="dryRun", action="store_true", help="Do not modify Github", default=False)
  parser.add_argument("-r", "--repository", dest="repository", help="Github Repositoy name, default is cms-sw/cmssw. Use 'externals' to process all external repos.", type=str, default="cms-sw/cmssw")
  parser.add_argument("-s", "--since", dest="since", help="Pull request updated since time in sec", type=int, default=3600)
  parser.add_argument("-i", "--issue", dest="issue", action="store_true", help="Process github issues", default=False)
  args = parser.parse_args()

  since=None
  if args.since>0:
    since = datetime.utcnow() - timedelta(seconds=args.since)

  repo_dir = join(SCRIPT_DIR,'repos',args.repository.replace("-","_"))
  if exists(join(repo_dir,"repo_config.py")): sys.path.insert(0,repo_dir)
  import repo_config
  from process_pr import process_pr
  from categories import EXTERNAL_REPOS
  repos = []
  if args.repository != "externals":
    repos.append(args.repository)
  else:
    repos = EXTERNAL_REPOS
  err=0
  for repo_name in repos:
    if not "/" in repo_name:
      for repo in get_organization_repositores(repo_name):
        err+=check_prs(repo, since, args.issue, args.dryRun)
    else:
      err+=check_prs(repo_name, since, args.issue, args.dryRun)
  sys.exit(err)
