#!/usr/bin/env python
from glob import glob
from commands import getstatusoutput
from xml.sax import parseString, ContentHandler
import argparse
import re
from sys import exit

class JobReportHandler(ContentHandler):
  def __init__(self, what, step, architecture, release, workflow):
    self.counters = dict((k, "") for k in what)
    self.step = step
    self.architecture = architecture
    self.release = release
    self.workflow = workflow

  def startElement(self, name, attrs):
    if name != "Metric":
      return
    
    if not attrs["Name"] in self.counters:
      return
    self.counters[attrs["Name"]] = attrs["Value"]

  def endDocument(self):
    counters = [v for (k,v) in sorted(self.counters.items())]
    print ",".join([self.architecture, self.release, self.step, self.workflow] + counters)

class SchemaDumper(ContentHandler):
  def __init__(self, schema):
    self.schema = schema

  def startElement(self, name, attrs):
    if name != "Metric":
      return
    self.schema.add(attrs["Name"])

IB_BASE_DIR="/afs/cern.ch/cms/sw/ReleaseCandidates"

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='Extract plot data from IB job reports')
  parser.add_argument('--base-dir', dest='baseDir', default=IB_BASE_DIR,
                      help='Where the logs are located.')
  parser.add_argument('--filter-release', dest='filterRelease', default=".*",
                      help='regexp to filter releases')
  parser.add_argument('what', metavar='KEYS', type=str, nargs='*',
                      help='What to dump from the logs')
  args = parser.parse_args()

  error, files = getstatusoutput("find %s/slc* -name 'pyRelValMatrixLogs.zip'" % IB_BASE_DIR)
  files = [x for x in files.split("\n") if x]
  schema = set()
  print ",".join(["architecture", "release", "step", "workflow"] + args.what)
  for f in files:
    architecture = re.sub(".*/((slc|osx|fc)[^/]*)/.*", "\\1", f)
    release = re.sub(".*/(CMSSW_[^/]*)/.*", "\\1", f)
    if not re.match(args.filterRelease, release):
      continue
    error, reports = getstatusoutput("unzip -l %s | grep JobReport | awk '{print $4}'" % f)
    for r in [x for x in reports.split("\n") if x]:
      cmd = "unzip -p %s %s" % (f, r)
      error, report = getstatusoutput(cmd)
      workflow = re.sub("^([0-9.]+)+.*", "\\1", r)
      step = re.sub(".*JobReport([0-9]).*", "\\1", r)
      if not args.what:
        handler = SchemaDumper(schema)
      else:
        handler = JobReportHandler(args.what, step, architecture, release, workflow)
      try:
        parseString(report, handler)
      except:
        continue
      if schema:
        print "\n".join(sorted(schema))
        exit(0)
