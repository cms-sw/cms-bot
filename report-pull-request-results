#! /usr/bin/env python
from os.path import expanduser
from optparse import OptionParser
from github import Github
import re

#-----------------------------------------------------------------------------------
#---- Parser Options
#-----------------------------------------------------------------------------------
parser = OptionParser(usage="usage: %prog ACTION [options] \n ACTION = TESTS_OK_PR | PARSE_UNIT_TESTS_FAIL | PARSE_BUILD_FAIL | PARSE_MATRIX_FAIL")

parser.add_option("-u", action="store", type="string", dest="username", help="Your github account username", default='None')
parser.add_option("-p", action="store", type="string", dest="password", help="Your github account password", default='None')
parser.add_option("--pr", action="store", type="int", dest="pr_number", help="The number of the pull request to use", default=-1)
parser.add_option("--pr-job-id", action="store", type="int", dest="pr_job_id", help="The jenkins job id for the  pull request to use", default=-1)
parser.add_option("--unit-tests-file", action="store", type="string", dest="unit_tests_file", help="Unit tests file to analyze", default='None')
parser.add_option("-t", action="store", type="string", dest="token", help="tells me to use the github api token, it supersedes the username and password, example: -t cmsbuild", default='None')
parser.add_option("--no-post", action="store_true", dest="no_post_mesage", help="I will only show the message I would post, but I will not post it in github")

(options, args) = parser.parse_args()


#-------------------------------------------------------------------------------------
def get_wf_error_msg(out_directory,out_file):
	route = 'runTheMatrix-results/'+out_directory+'/'+out_file
	reading = False
	error_lines = ''
	error_lines += route +'\n' + '\n'
	for line in open(route):
		if reading:
			error_lines += line + '\n'
			if '----- End Fatal Exception' in line:
				reading = False
		elif '----- Begin Fatal Exception' in line:
			error_lines += line + '\n'
			reading = True
	return error_lines

def parse_workflow_info(parts):
	workflow_info = {}
	for i in range(0,len(parts)):
		current_part = parts[i]
		if (current_part == 'cd'):
			out_directory = parts[ i+1 ] 
			out_directory = re.sub(';', '', out_directory)
			number = re.sub('_.*$', '', out_directory)
			workflow_info['out_directory']=out_directory
			workflow_info['number']=number
		if (current_part == '>'):
			out_file = parts[i+1]
			step = re.sub('_.*log', '', out_file)
			workflow_info['out_file']=out_file
			workflow_info['step']=step
	workflow_info['message'] = get_wf_error_msg(out_directory,out_file)
	return workflow_info
		
 
def read_matrix_log_file(repo,matrix_log,tests_url):
	pull_request = repo.get_pull(pr_number)
	workflows_with_error = []
	for line in open(matrix_log):
		if 'ERROR executing' in line:
			parts = line.split(" ")
			workflow_info = parse_workflow_info(parts)
			workflows_with_error.append(workflow_info)
	message = '-1 \n When I ran the RelVals I found an error in the following worklfows: \n '
	for wf in workflows_with_error:
		message += wf['number'] +' '+ wf['step']+'\n' + '<pre>' + wf['message'] + '</pre>' + '\n'
	message += '\n you can see the results of the tests here: \n %s ' % tests_url
        print message
	if not options.no_post_mesage:
		pull_request.create_issue_comment(message) 


def read_build_log_file(repo,build_log,tests_url):
	pull_request = repo.get_pull(pr_number)
	error_found = False
	line_number = 0
	error_line = 0
	lines_to_keep_before=5
	lines_to_keep_after=5
	lines_since_error=0
	lines_before = ['']
	lines_after = ['']
	error_found = False
	for line in open(build_log):
		line_number += 1
		if (not error_found):
			lines_before.append(line)
			if (line_number > lines_to_keep_before):
				lines_before.pop(0)
		if 'error: ' in line:
			error_found = True
			error_line = line_number
		if error_found:
			if (lines_since_error == 0):
				lines_since_error += 1
				continue
			elif (lines_since_error <= lines_to_keep_after):
				lines_since_error += 1
				lines_after.append(line)
			else:
				break
	message = '-1 \n I found an error when building: \n \n <pre>'
	for line in lines_before:
		message += line + '\f'
	for line in lines_after:
		message += line + '\f'
	message += '</pre> \n you can see the results of the tests here: \n %s ' % tests_url
	print message 
	if not options.no_post_mesage:
		pull_request.create_issue_comment(message)

def read_unit_tests_file(repo,unit_tests_file,tests_url):
	pull_request = repo.get_pull(pr_number)
	errors_found=''
	for line in open(unit_tests_file):
		if( 'had ERRORS' in line):
			errors_found = errors_found + line
	message = '-1 \n I ran the usual tests and I found errors in the following unit tests: \n \n %s \n \n' % errors_found
	message = message + 'you can see the results of the tests here: \n %s ' % tests_url
	print message
	if not options.no_post_mesage:
		pull_request.create_issue_comment(message)

def send_tests_approved_pr_message(repo,pr_number,tests_url):
	pull_request = repo.get_pull(pr_number)
	print 'I will send an approval comment for PR %d:' % pr_number
	message = '+1' +'\n' + tests_url
	print 'Message:'
	print message
	if not options.no_post_mesage:
		pull_request.create_issue_comment(message)

def get_cmssw_official_repo(github):
        user = github.get_user()
        orgs = user.get_orgs()
        for org in orgs:
                if (org.login == 'cms-sw'):
			repo = org.get_repo('cmssw')
			return repo

def complain_missing_param(param_name):
	print '\n'
	print 'I need a %s to continue' % param_name
	print '\n'
	parser.print_help()
        exit()

#----------------------------------------------------------------------------------------
#---- Check arguments and options
#---------------------------------------------------------------------------------------

if (len(args)==0):
	print 'you have to choose an action'
	parser.print_help()
	exit()

action = args[0]

if (action == 'prBot.py'):
	print 'you have to choose an action'
        parser.print_help()
        exit()

print 'you chose the action %s' % action

if (options.token == 'None' ):
	if (options.username == 'None' ):
		complain_missing_param('github username')
		exit()
	else:
		username = options.username
	if (options.password == 'None' ):
        	complain_missing_param('github password')
        	exit()
	else:
		password = options.password
	github = Github(username, password)
elif (options.token == 'nclopezo' ):
	github = Github(login_or_token=open(expanduser("/afs/cern.ch/user/d/dmendezl/private/github-token")).read().strip())
else:
	github = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())

if (options.pr_number == -1 ):
        complain_missing_param('pull request number')
        exit()
else:
	pr_number = options.pr_number

if (options.pr_job_id == -1 ):
        complain_missing_param('pull request job id')
        exit()
else:
	pr_job_id=options.pr_job_id

#github = Github(username, password)
#github = Github(login_or_token=open(expanduser("/afs/cern.ch/user/d/dmendezl/private/github-token")).read().strip())
official_cmssw=get_cmssw_official_repo(github)

tests_results_url='https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-%d/%d/summary.html' % (pr_number,pr_job_id)

if (action == 'TESTS_OK_PR'):
	send_tests_approved_pr_message(official_cmssw,pr_number,tests_results_url)
elif (action == 'PARSE_UNIT_TESTS_FAIL'):
	unit_tests_file = options.unit_tests_file
	read_unit_tests_file(official_cmssw,unit_tests_file,tests_results_url)
elif (action == 'PARSE_BUILD_FAIL'):
	build_log_file = options.unit_tests_file
	read_build_log_file(official_cmssw,build_log_file, tests_results_url)
elif (action == 'PARSE_MATRIX_FAIL'):
	matrix_log_file = options.unit_tests_file
	read_matrix_log_file(official_cmssw,matrix_log_file,tests_results_url)
else:
	print "I don't recognize that action!"
