#!/usr/bin/env python3
"""
Returns top commit of a PR (mostly used to comments)
"""
from __future__ import print_function
from os.path import dirname, abspath, join, exists
from argparse import ArgumentParser
from socket import setdefaulttimeout
from github_utils import api_rate_limits, get_pr_commits, get_pr_latest_commit, get_gh_token, \
  get_issue

setdefaulttimeout(120)
import sys
SCRIPT_DIR = dirname(abspath(sys.argv[0]))

if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("-c", "--commit",     dest="commit",     action="store_true", help="Get last commit of the PR", default=False)
  parser.add_argument("-a", "--all",        dest="all",        action="store_true", help="Get all commits of the PR", default=False)
  parser.add_argument("-n", "--dry-run",    dest="dryRun",     action="store_true", help="Do not modify Github", default=False)
  parser.add_argument("-f", "--force",      dest="force",      action="store_true", help="Force process the issue/PR even if it is ignored.", default=False)
  parser.add_argument("-r", "--repository", dest="repository", help="Github Repositoy name e.g. cms-sw/cmssw.", type=str, default="cms-sw/cmssw")
  parser.add_argument("prId", help="Pull request ID", nargs=1)
  args = parser.parse_args()

  prId = int(args.prId[0])  # Positional argument is "Pull request ID"
  if args.commit:
    if args.all:
      for c in get_pr_commits(prId, args.repository):
        print(c['sha'])
    else:
      print(get_pr_latest_commit(prId, args.repository))
  else:
    repo_dir = join(SCRIPT_DIR,'repos',args.repository.replace("-","_"))
    if exists(join(repo_dir,"repo_config.py")): sys.path.insert(0,repo_dir)
    import repo_config
    get_gh_token(args.repository)
    api_rate_limits(None)  # TODO: remove dummy argument
    repo = args.repository
    from process_pr import process_pr
    process_pr(repo_config, None, repo, get_issue(repo, prId), args.dryRun,
               force=args.force)
